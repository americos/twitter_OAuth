
package com.jackbe.oauth;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.Properties;

import twitter4j.ResponseList;
import twitter4j.Status;
import twitter4j.Twitter;
import twitter4j.TwitterException;
import twitter4j.TwitterFactory;
import twitter4j.auth.AccessToken;
import twitter4j.auth.RequestToken;


public class RequestAccessToken {
	private static Properties props = new Properties();
	private static String filename = "twitteraccesstoken.properties";
	static String consumerKey1 = "thCU8fx0i4ch5zj2Gw0ugQ";
	static String consumerSecret1 = "kaKitCxT223V78A2uHdpXqMPE6XegLxsMugntb9MI";
	static String consumerKey2 = "ML7mCmrDOmyjrTkhz1gdvw";
	static String consumerSecret2 = "xvbQTYZIRIzACzedRVDO0whPZzrgYDnRyEANJV6PecY";
	
	static String consumerKey3 = "A8dFrSqGZ3P5liY4wb3Mww";
	static String consumerSecret3 = "23FTldxYah2R4OdlmsXLzZLVaIs5NVC0wK7c68duo";


	private static AccessToken loadAccessToken(String useId) throws Exception {
		props.load(new FileInputStream(filename));
		System.out.println("Retrieving token for user: " + useId);
		String token = props.getProperty(useId + "Token");
		String tokenSecret = props.getProperty(useId + "TokenSecret");
		System.out.println("Got token: " + token);
		if(token == null)
			throw new Exception("Access Token Not Found for user: " + useId);
		return new AccessToken(token, tokenSecret);
	}

	private static void storeAccessToken(String useId, AccessToken accessToken) {
		System.out.println("Storing : " + accessToken.getToken()
				+ " for user: " + useId);
		props.put(useId + "Token", accessToken.getToken());
		props.put(useId + "TokenSecret", accessToken.getTokenSecret());
		try {
			props.store(new FileOutputStream(filename),
					"Auto-generated by RequestAccessToken class");
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	public static String printTwitterFeeds( String user){
		
		Twitter twitter = null;
		twitter = new TwitterFactory().getInstance();
		
		ResponseList status;
		
		String sampleStatus = "";
		try {
			status = twitter.getUserTimeline( user );
			for(int k = 0; k<status.toArray().length; k++ ){
				System.out.println( k +") "+"Status for user:" + status.toArray()[k]);
			}
			sampleStatus = status.toArray()[0].toString();
		} catch (TwitterException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return "Yes Twitter was called and return:"+ sampleStatus;
	}

	public static void main(String args[]) throws Exception {
		Twitter twitter = null;
		AccessToken accessToken = null;
		
		//String result = printTwitterFeeds("JackBeIntel3");
		//System.out.println(result);
		
		
		for (int i = 1; i < 4; i++) {
			twitter = new TwitterFactory().getInstance();
			if(i == 1)
				twitter.setOAuthConsumer(consumerKey1, consumerSecret1);
			if(i == 2)
				twitter.setOAuthConsumer(consumerKey2, consumerSecret2);
			if(i == 3)
				twitter.setOAuthConsumer(consumerKey3, consumerSecret3);

			try {
				accessToken = loadAccessToken("JackBeIntel" + i);
				System.out.println("Successfully loaded access token for user: JackBeIntel" + i);
				twitter.setOAuthAccessToken(accessToken);
			} 
			catch (Exception e) {
				System.out.println("Exception loading access token: " + e);
				e.printStackTrace();
				RequestToken requestToken = twitter.getOAuthRequestToken();
				BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
				while (null == accessToken) {
					System.out.println("Open the following URL and grant access to your account:");
					System.out.println(requestToken.getAuthorizationURL());
					System.out.print("Enter the PIN(if aviailable) or just hit enter.[PIN]:");
					String pin = br.readLine();
					try {
						if (pin.length() > 0) {
							accessToken = twitter.getOAuthAccessToken(
									requestToken, pin);
						} else {
							accessToken = twitter
									.getOAuthAccessToken(requestToken);
							System.out.println("AccessToken screen name: "
									+ accessToken.getScreenName());
						}
					} catch (TwitterException te) {
						if (401 == te.getStatusCode()) {
							System.out
									.println("Unable to get the access token.");
						} else {
							te.printStackTrace();
						}
					}
				}
				// persist to the accessToken for future reference.
				storeAccessToken(twitter.verifyCredentials().getScreenName(), accessToken);
			}

			// For each user, update the status 350 times to ensure not limit not IP based.
			for(int j = 1; j <= 1; j++) {
				try {
					//Status status = twitter.updateStatus("Testing " + System.currentTimeMillis());
					//System.out.println("Successfully updated the status " + (j+1) + " times for user: JackBeIntel" + i);
					ResponseList status = twitter.getUserTimeline("JackBeIntel" + i);
					for(int k = 0; k<status.toArray().length; k++ ){
						System.out.println( k +") "+"Status for user:" + status.toArray()[k]);
					}
					System.out.println("=== Remaining Hits for this User: " + twitter.getRateLimitStatus().getRemainingHits());
					
				}
				catch(TwitterException e) {
					System.out.println("Error for user JackBeIntel" + i + ": " + e.getErrorMessage());
					break;
				}
			}
			
			accessToken = null;
		}
		
	}

}
