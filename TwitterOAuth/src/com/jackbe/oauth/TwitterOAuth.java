package com.jackbe.oauth;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Properties;

import twitter4j.Paging;
import twitter4j.ResponseList;
import twitter4j.Status;
import twitter4j.Twitter;
import twitter4j.TwitterException;
import twitter4j.TwitterFactory;
import twitter4j.auth.AccessToken;
import twitter4j.auth.RequestToken;
import twitter4j.internal.http.HttpParameter;
import twitter4j.internal.http.HttpResponse;

public class TwitterOAuth {
	private static Properties props = new Properties();
	private static String filename = "twitteraccesstoken.properties";
	
	//These are the Twitter Accounts for JackBeIntel 1-3
	static String consumerKey1 = "thCU8fx0i4ch5zj2Gw0ugQ";
	static String consumerSecret1 = "kaKitCxT223V78A2uHdpXqMPE6XegLxsMugntb9MI";
	static String consumerKey2 = "ML7mCmrDOmyjrTkhz1gdvw";
	static String consumerSecret2 = "xvbQTYZIRIzACzedRVDO0whPZzrgYDnRyEANJV6PecY";
	static String consumerKey3 = "A8dFrSqGZ3P5liY4wb3Mww";
	static String consumerSecret3 = "23FTldxYah2R4OdlmsXLzZLVaIs5NVC0wK7c68duo";
	
	//private static List<String> userList = new ArrayList<String>(){{
	//	userList.add(new String("JackBeUser1"));
	//	userList.add(new String("americo"));
	//}};
	
	
	
	//Method for loading the User Access Token
	private static AccessToken loadAccessToken(String useId) throws Exception {
		props.load(new FileInputStream(filename));
		System.out.println("Retrieving token for user: " + useId);
		String token = props.getProperty(useId + "Token");
		String tokenSecret = props.getProperty(useId + "TokenSecret");
		System.out.println("Got token: " + token);
		if(token == null)
			throw new Exception("Access Token Not Found for user: " + useId);
		return new AccessToken(token, tokenSecret);
	}
	
	//Method for saving the a Users Access Token
	private static void storeAccessToken(String useId, AccessToken accessToken) {
		System.out.println("Storing : " + accessToken.getToken()
				+ " for user: " + useId);
		props.put(useId + "Token", accessToken.getToken());
		props.put(useId + "TokenSecret", accessToken.getTokenSecret());
		try {
			props.store(new FileOutputStream(filename),
					"Auto-generated by RequestAccessToken class");
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	
	public static String printTwitterFeeds(Twitter twitter, String user){
		
		ResponseList status;
		
		String sampleStatus = "";
		try {
			status = twitter.getUserTimeline( user );
			System.out.println("Limit: " + twitter.getRateLimitStatus());
			for(int k = 0; k<status.toArray().length; k++ ){
				System.out.println( k +") "+"Status for user:" + status.toArray()[k]);
			}
			sampleStatus = status.toArray()[0].toString();
			
			System.out.println("=== Remaining Hits for User: " + user + " --> " + twitter.getRateLimitStatus().getRemainingHits());
			
		} catch (TwitterException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
		//return "Yes Twitter was called and return:"+ sampleStatus;
		return "Yes Twitter was called and return:";
	}
	
	
	
	public static void main(String[] args) throws Exception{
		
		Twitter twitter = null;
		AccessToken accessToken = null;
		
		twitter = new TwitterFactory().getInstance();
		
		//Sign in with oAuth to Twitter
		twitter.setOAuthConsumer(consumerKey1, consumerSecret1);
		
		try {
			String user = "JackBeIntel1";
			
			accessToken = loadAccessToken( user );
			System.out.println("Successfully loaded access token for user: "+ user );
			twitter.setOAuthAccessToken(accessToken);
		} 
		catch (Exception e) {
			
		}
		
		//Printing my Tweets! 
		printTwitterFeeds( twitter, "intel");
		
		
		
	}
}
