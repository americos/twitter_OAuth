package com.jackbe.oauth;

import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.URL;
import java.net.URLConnection;
import java.util.HashMap;
import java.util.List;

import twitter4j.Status;
import twitter4j.Twitter;
import twitter4j.TwitterFactory;
import twitter4j.auth.AccessToken;

import oracle.net.aso.s;

import org.apache.commons.lang.StringEscapeUtils;

import com.jackbe.jbp.jems.client.EMMLUserFunction;

import edu.emory.mathcs.backport.java.util.Arrays;



public class TwitterOAuth extends EMMLUserFunction {

	/**
	 * @lastModiification 09/14/2011  By americos@JackBe.com  
	 * @version version 1.1
	 * @author JackBe 	 
	 * @modified by: Americo
	 * @notes This class needs the twitteraccesstoken.properties to be places on the class folder of the app container.
	 * 			Also needs the Jar file: twitter4j-core-2.2.4.jar on the lib folder.
	 */
	private static final long serialVersionUID = 1L;
	private static SortedProperties props;
	private static String filename = "twitteraccesstoken.properties";
	private static Twitter twitter;
	private static AccessToken accessToken;
	private static int numberOfAccounts;
	private static HashMap<Integer, Boolean> users;
	private static String initialUserId;
	private static int finalUserIndex;
	private static String path;
	
	private static int hitsRemaining;

	public static void initialize() throws Exception {
		path= Thread.currentThread().getContextClassLoader().getResource(filename).getPath();
		ClassLoader ctxLoader = Thread.currentThread().getContextClassLoader();
		URL resURL = ctxLoader.getResource(filename);
		URLConnection resConn = resURL.openConnection();
		resConn.setUseCaches(false);
		InputStream is = resConn.getInputStream();
		accessToken = null;
		props = new SortedProperties();
		users = new HashMap<Integer, Boolean>();
		twitter = new TwitterFactory().getInstance();
		props.load(is);
		initialUserId = props.getProperty("currentUser");
		if (initialUserId == null) {
			initialUserId = "JackBeIntel1";
		}
		try {
			numberOfAccounts = Integer.parseInt(props
					.getProperty("numberOfAccounts"));
		} catch (Exception e) {
			throw new Exception("numberOfAccounts is not defined in "
					+ filename);
		}
		// System.out.println("numberOfAccounts :" + numberOfAccounts);
	}

	private static void savePropertiesFile() {
		try {
			props.store(new FileOutputStream(path),
			"Auto-generated by com.jackbe.oauth.TwitterOAuth class");
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}

	}

	// Method for loading the User Access Token
	private static AccessToken loadAccessToken(int userIndex) throws Exception {

		if (users.containsKey(userIndex) == true) {
			return null;

		} else {
			if (userIndex > numberOfAccounts) {
				return loadAccessToken(1);

			}
			users.put(userIndex, true);

		}

		String useId = "JackBeIntel" + userIndex;
		System.out.println("Retrieving token for user: " + useId);
		String token = props.getProperty(useId + "Token");
		String tokenSecret = props.getProperty(useId + "TokenSecret");


		if ((token == null || tokenSecret == null)
				&& userIndex <= numberOfAccounts) {
			System.out
					.println("*** AccessToken Or TokenSecret Not Found for user: "
							+ useId);
			return loadAccessToken(userIndex + 1);
		}

		String consumerKey = props.getProperty("consumerKey" + userIndex);
		String consumerSecret = props.getProperty("consumerSecret" + userIndex);

		if ((consumerKey == null || consumerSecret == null)
				&& userIndex <= numberOfAccounts) {
			System.out
					.println("consumerKey Or consumerSecret Not Found for user: "
							+ useId);
			return loadAccessToken(userIndex + 1);
		}

		twitter.setOAuthConsumer(consumerKey, consumerSecret);
		finalUserIndex = userIndex;
		// Only update the properties file if the Account change
		if (Integer.parseInt(initialUserId.replaceAll("JackBeIntel", "")) != userIndex) {
			props.put("currentUser", useId);
			savePropertiesFile();
		}
		accessToken = new AccessToken(token, tokenSecret);
		twitter.setOAuthAccessToken(accessToken);
		
		System.out.println("Limit: " + twitter.getRateLimitStatus());
		
		if (twitter.getRateLimitStatus().getRemainingHits() < 1) {
			twitter = new TwitterFactory().getInstance();
			return loadAccessToken(finalUserIndex + 1);
		}
		
		hitsRemaining = twitter.getRateLimitStatus().getRemainingHits();
		
		return accessToken;
	}

	// Method for loading the User Access Token
	private static AccessToken loadAccessToken() throws Exception {
		// Call the last user that was used and stored in the properties file
		// otherwise start with user #1
		int userIndex = 1;
		if (initialUserId != null) {
			userIndex = Integer.parseInt(initialUserId.replaceAll(
					"JackBeIntel", ""));
		}
		return loadAccessToken(userIndex);
	}

	public static String printTwitterFeeds(String user) throws Exception {

		StringBuilder myItems = new StringBuilder();
		myItems.append("<items>");

		try {

			initialize();

			if (loadAccessToken() == null) {
				return "<error>You have reached the limit of requets for all the "
						+ numberOfAccounts
						+ " accounts Or there are not valid accounts information in "
						+ filename 
						+ " file</error>";
			}

			List<Status> statuses = twitter.getUserTimeline(user);
			//System.out.println("Showing " + user + " timeline.");

			String created_at = "", time ="", year ="", temp="", user_id="", tweet_id="";
			String twitter_intent = "https://twitter.com/intent/"; //use for creating the retweet, follow, etc.
			
			for (Status status2 : statuses) {

				System.out.println(" == Status: " +status2.toString());
				user_id = status2.getUser().getId() + "";
				tweet_id = status2.getId() + "";
				
				//System.out.println(" == User: " + user_id);
				//System.out.println("== Tweet id: " + tweet_id);
				
				//Inserting comma for desired created_at format: Wed, Sep 14 11:14:16 EDT 2011
				created_at = StringEscapeUtils.escapeXml(status2.getCreatedAt().toString());				
				//created_at = new StringBuffer(created_at).insert(3, ",").toString();
				//System.out.println("Created_at: " +  created_at);
				
				//twitter4J is returning the date as: Wed, Sep 14 11:14:16 EDT 2011
												//	  Wed, Sep 14 2011 11:14:16 EDT 
					//but the atom service has it as: Wed, 14 Sep 2011 15:14:16 +0000 
					//for the sake of compability let's keep with the atom /Americo
					String[] date_split = created_at.split(" ");
					
					time = date_split[3];
					year = date_split[5];
					temp = time;
					date_split[3] = year;
					date_split[5] = temp;				
					
					StringBuffer sb = new StringBuffer();
					for(int i=0; i< date_split.length; i++){
						//ignore positon 4 for EDT
						if(i != 4){
							sb.append(date_split[i]);
							sb.append(" ");
						}
					}
					sb.append("+0000");
					created_at =  sb.toString();
					
					//System.out.println("hits:" + hitsRemaining);
					
				
				 myItems.append("<item>");
				 myItems.append("<entry>" + StringEscapeUtils.escapeXml(status2.getText()) + "</entry>");				 
				 myItems.append("<source>" + "twitter" + "</source>");
				 myItems.append("<created_time>" + created_at + "</created_time>");
				 myItems.append("<link>" + StringEscapeUtils.escapeXml("http://twitter.com/#!/" + user + "/statuses/" + status2.getId()) + "</link>");
				 myItems.append("<timestamp>" + StringEscapeUtils.escapeXml(status2.getCreatedAt().toString()) +"</timestamp>");
				 
				 myItems.append("<twitter_user_hits>" + initialUserId + "," + hitsRemaining + "</twitter_user_hits>");
				 //myItems.append("<twitter_tweet>" + twitter_intent + "tweet?in"+ "</twitter_tweet>")
				 myItems.append("<twitter_user>" + user_id +"</twitter_user>");
				 myItems.append("<twitter_id>" + tweet_id +"</twitter_id>");
				 myItems.append("</item>");
			}
		} catch (Exception e) {
			return "<error>" + StringEscapeUtils.escapeXml(e.getMessage()) + "</error>";
		}

		myItems.append("</items>");

		return myItems.toString();
	}

	public static void main(String[] args) throws Exception {

		// Printing my Tweets!
		for (int i = 0; i < 2; i++) {
			System.out.println(TwitterOAuth.printTwitterFeeds("americos"));
		}

	}
}
